{"version":3,"sources":["App.jsx","reportWebVitals.js","index.jsx"],"names":["apiKey","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","class","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAGMA,EACC,2CADDA,EAEC,GAiHQC,MA9Gf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAiDb,OACE,qBAAKC,UAAU,MAAf,SACE,sBAAKA,UAAU,WAAf,UACE,qBAAKA,UAAU,SAAf,SACE,sBACEA,UACyB,oBAAhBF,EAAQG,KACXH,EAAQG,KAAKC,MAAQ,GACnB,WAEA,WAEF,MARR,UAWG,IACD,iCACE,qBAAKF,UAAU,aAAf,SACE,uBACEG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SAAU,SAACC,GAAD,OAAOT,EAASS,EAAEC,OAAOC,QACnCA,MAAOZ,EACPa,WArED,SAACC,GACE,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAInB,EAAJ,qBAA2BG,EAA3B,+BAAuDH,IACzDoB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,WAiEgB,oBAAhBlB,EAAQG,KACd,gCACE,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UACGF,EAAQqB,KADX,KACmBrB,EAAQsB,IAAIC,WAE/B,qBAAKrB,UAAU,OAAf,SAlEE,SAACsB,GACnB,IAwBIC,EAVO,CACT,SACA,SACA,UACA,YACA,WACA,SACA,YAGaD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EA1BS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAciBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAoCKE,CAAY,IAAIC,WAEzC,sBAAKhC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACGiC,KAAKC,MAAMpC,EAAQG,KAAKC,MAD3B,WAGA,qBAAKF,UAAU,UAAf,SAA0BF,EAAQA,QAAQ,GAAGG,aAIjD,WAKR,qBAAKkC,MAAM,SACX,sBAAKA,MAAM,SAAX,UACE,qBAAKA,MAAM,aACX,qBAAKA,MAAM,aACX,qBAAKA,MAAM,gBAEb,qBAAKA,MAAM,kBACX,qBAAKA,MAAM,uBCpGJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.45d09b09.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.scss';\n\nconst apiKey = {\n  url: 'https://api.openweathermap.org/data/2.5/',\n  key: '',\n};\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  const search = (evt) => {\n    if (evt.key === 'Enter') {\n      fetch(`${apiKey.url}weather?q=${query}&units=metric&APPID=${apiKey.key}`)\n        .then((res) => res.json())\n        .then((result) => {\n          setWeather(result);\n          setQuery('');\n          console.log(result);\n        });\n    }\n  };\n\n  const dateBuilder = (d) => {\n    let months = [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December',\n    ];\n    let days = [\n      'Sunday',\n      'Monday',\n      'Tuesday',\n      'Wednesday',\n      'Thursday',\n      'Friday',\n      'Saturday',\n    ];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`;\n  };\n\n  return (\n    <div className='App'>\n      <div className='iphone-x'>\n        <div className='bazzel'>\n          <div\n            className={\n              typeof weather.main != 'undefined'\n                ? weather.main.temp >= 16\n                  ? 'app warm'\n                  : 'app' || weather.main.temp < 15\n                  ? 'app cold'\n                  : 'app'\n                : 'app'\n            }\n          >\n            {' '}\n            <main>\n              <div className='search-box'>\n                <input\n                  type='text'\n                  className='search-bar'\n                  placeholder='Search...'\n                  onChange={(e) => setQuery(e.target.value)}\n                  value={query}\n                  onKeyPress={search}\n                />\n              </div>\n              {typeof weather.main != 'undefined' ? (\n                <div>\n                  <div className='location-box'>\n                    <div className='location'>\n                      {weather.name}, {weather.sys.country}\n                    </div>\n                    <div className='date'>{dateBuilder(new Date())}</div>\n                  </div>\n                  <div className='weather-box'>\n                    <div className='temp'>\n                      {Math.round(weather.main.temp)}Â°c\n                    </div>\n                    <div className='weather'>{weather.weather[0].main}</div>\n                  </div>\n                </div>\n              ) : (\n                ''\n              )}\n            </main>\n          </div>\n        </div>\n        <div class='line'></div>\n        <div class='header'>\n          <div class='sensor-1'></div>\n          <div class='sensor-2'></div>\n          <div class='sensor-3'></div>\n        </div>\n        <div class='volume-button'></div>\n        <div class='power-button'></div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}